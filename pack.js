// Generated by CoffeeScript 1.10.0

/*
 * javascript 打包
 * @author jackie Lin <dashi_lin @163.com>
 */
'use strict';
var FS, _, config, gutil, path, through2,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

through2 = require('through2');

FS = require("q-io/fs");

path = require('path');

gutil = require('gulp-util');

_ = require('lodash');

config = {};


/*
 * 设置配置
 */

exports.setConfig = function(projectConfig) {
  return config = projectConfig;
};


/*
 * 将对应目录的文件进行合并
 */

exports.combineFile = function(filterList) {
  if (filterList == null) {
    filterList = [];
  }
  return through2.obj(function(file, enc, callback) {
    var files, self, srcPath;
    srcPath = file.path;
    files = [];
    self = this;
    return FS.stat(srcPath).then(function(stat) {
      if (stat.isDirectory() === false) {
        throw new Error('%s is not directory', srcPath);
      }
      return FS.list(srcPath);
    }).then(function(list) {
      return list.filter(function(item) {
        return path.extname(item) === '.js' && item.indexOf('.') !== 0;
      });
    }).then(function(list) {
      var hasIndex, task;
      hasIndex = false;
      task = [];
      list.forEach(function(v) {
        if (v.indexOf(config.index || 'index.js') >= 0) {
          hasIndex = v;
        }
        if (v.indexOf(config.index || 'index.js') < 0) {
          task.push(FS.read(path.join(srcPath, v)));
        }
        if (v.indexOf(config.index || 'index.js') < 0) {
          files.push(path.join(srcPath, v));
        }
      });
      if (hasIndex) {
        task.push(FS.read(path.join(srcPath, hasIndex)));
      }
      if (hasIndex) {
        files.push(path.join(srcPath, hasIndex));
      }
      return task;
    }).spread(function() {
      var args, excludeFiles, name, source;
      args = Array.prototype.slice.call(arguments);
      excludeFiles = [];
      excludeFiles = files.map(function(v, k) {
        var data, tmp;
        if ((v != null) && indexOf.call(filterList, v) >= 0) {
          tmp = args.splice(k, 1)[0];
          data = {
            key: path.relative(srcPath, v),
            value: tmp
          };
          return data;
        }
      });
      excludeFiles = excludeFiles.filter(function(v) {
        return v != null;
      });
      source = args.join(';');
      name = _.chain(srcPath.split(path.sep)).initial().last();
      name = name + '.all.js';
      file.contents = new Buffer(source);
      file.path = path.join(srcPath, '../', name);
      self.push(file);
      excludeFiles.forEach(function(v) {
        return self.push(new gutil.File({
          cwd: file.cwd,
          path: v.key,
          contents: new Buffer(v.value)
        }));
      });
      return callback();
    }).fail(function(err) {
      return callback(err, file);
    });
  });
};
